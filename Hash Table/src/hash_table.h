#include <stdio.h>

// HASH TABLE IS AN ARRAY OF "BUCKETS", THAT STORE A KEY VALUE PAIR(CHAR[] -> CHAR[])
// THEN I NEED TO DEFINE A BUCKETS STRUCT AND A HASH TABLE STRUCT IN THIS HEADER FILE
typedef struct
{
    char *key;
    char *value;
} ht_item;
// DEFINITION FOR A HASH TABLE KEEPING TRACKING OF THE NUMBER OF ELEMENTS AND SIZE
typedef struct
{
    // SIZE OF THE HASH TABLE OR ASSOCIATIVE ARRAY
    int size;
    // NUMBER OF ITEMS CURRENTLY IN THE HASH TABLE/HOW MANY SPACES WE ARE USING IN THE HASH TABLE
    int count;
    // THIS IS THE ARRAY OF POINTERS THAT HOLD HT_ITEM POINTERS, SO THINK OF EACH HT_ITEM AS A "BUCKET POINTER"
    ht_item **items;
} ht_hash_table;

// TAKE IN AN ASSOCIATIVE ARRAY WITH A KEY(WHICH IS A STRING) AND RETURN THE VALUE ASSOCIATED WITH THAT KEY AND RETURN NULL IF IT DOES NOT EXIST
// char *search(a, k) ;
// IT INSERTS A KEY VALUE WITH THE GIVEN KEY AND VALUE INTO THE PROVIDED ARRAY
// void insert(a, k, v);
// IT DELETES THE KEY VALUE PAIR FROM THE PROVIDED ARRAY; IF KEY DOESN'T EXIST IT DOES NOTHING
// void delete(a, k);
